[{"/home/bhuwan/Desktop/React/confusion_1/src/index.js":"1","/home/bhuwan/Desktop/React/confusion_1/src/reportWebVitals.js":"2","/home/bhuwan/Desktop/React/confusion_1/src/App.js":"3","/home/bhuwan/Desktop/React/confusion_1/src/components/MenuComponent.js":"4","/home/bhuwan/Desktop/React/confusion_1/src/shared/dishes.js":"5","/home/bhuwan/Desktop/React/confusion_1/src/components/MainComponent.js":"6","/home/bhuwan/Desktop/React/confusion_1/src/components/HeaderComponent.js":"7","/home/bhuwan/Desktop/React/confusion_1/src/components/FooterComponent.js":"8","/home/bhuwan/Desktop/React/confusion_1/src/components/HomeComponent.js":"9","/home/bhuwan/Desktop/React/confusion_1/src/components/ContactComponent.js":"10","/home/bhuwan/Desktop/React/confusion_1/src/shared/promotions.js":"11","/home/bhuwan/Desktop/React/confusion_1/src/shared/leaders.js":"12","/home/bhuwan/Desktop/React/confusion_1/src/shared/Comments.js":"13","/home/bhuwan/Desktop/React/confusion_1/src/components/AboutComponent.js":"14","/home/bhuwan/Desktop/React/confusion_1/src/redux/configureStore.js":"15","/home/bhuwan/Desktop/React/confusion_1/src/components/DishDetail.js":"16","/home/bhuwan/Desktop/React/confusion_1/src/redux/dishes.js":"17","/home/bhuwan/Desktop/React/confusion_1/src/redux/comments.js":"18","/home/bhuwan/Desktop/React/confusion_1/src/redux/promotions.js":"19","/home/bhuwan/Desktop/React/confusion_1/src/redux/leaders.js":"20","/home/bhuwan/Desktop/React/confusion_1/src/redux/ActionTypes.js":"21","/home/bhuwan/Desktop/React/confusion_1/src/redux/ActionCreaters.js":"22","/home/bhuwan/Desktop/React/confusion_1/src/components/LoadingComponent.js":"23"},{"size":771,"mtime":1608472143697,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1607561578944,"results":"26","hashOfConfig":"25"},{"size":560,"mtime":1609308729511,"results":"27","hashOfConfig":"25"},{"size":1686,"mtime":1610270951051,"results":"28","hashOfConfig":"25"},{"size":1448,"mtime":1608615920395,"results":"29","hashOfConfig":"25"},{"size":3917,"mtime":1610259497525,"results":"30","hashOfConfig":"25"},{"size":4995,"mtime":1610271574282,"results":"31","hashOfConfig":"25"},{"size":2581,"mtime":1608473282373,"results":"32","hashOfConfig":"25"},{"size":1528,"mtime":1610271617942,"results":"33","hashOfConfig":"25"},{"size":10809,"mtime":1609559704279,"results":"34","hashOfConfig":"25"},{"size":435,"mtime":1608616357741,"results":"35","hashOfConfig":"25"},{"size":2341,"mtime":1608625507601,"results":"36","hashOfConfig":"25"},{"size":4117,"mtime":1608078702040,"results":"37","hashOfConfig":"25"},{"size":4266,"mtime":1608635046957,"results":"38","hashOfConfig":"25"},{"size":743,"mtime":1610191718863,"results":"39","hashOfConfig":"25"},{"size":10903,"mtime":1610260133288,"results":"40","hashOfConfig":"25"},{"size":842,"mtime":1610193314520,"results":"41","hashOfConfig":"25"},{"size":638,"mtime":1610175830447,"results":"42","hashOfConfig":"25"},{"size":216,"mtime":1610062806400,"results":"43","hashOfConfig":"25"},{"size":204,"mtime":1610062855272,"results":"44","hashOfConfig":"25"},{"size":352,"mtime":1610191713419,"results":"45","hashOfConfig":"25"},{"size":1030,"mtime":1610192298708,"results":"46","hashOfConfig":"25"},{"size":264,"mtime":1610238080325,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"p0qgug",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/home/bhuwan/Desktop/React/confusion_1/src/index.js",["100"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// // importing an application \n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["101","102"],"/home/bhuwan/Desktop/React/confusion_1/src/reportWebVitals.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/App.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/components/MenuComponent.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/shared/dishes.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/components/MainComponent.js",["103"],"import React, {Component} from 'react';\nimport Home from './HomeComponent';\nimport Menu from './MenuComponent';\nimport DishDetail from './DishDetail'\nimport Contact from './ContactComponent';\nimport About from './AboutComponent';\nimport Header from './HeaderComponent';\nimport Footer from './FooterComponent';\nimport {Switch, Route, Redirect, withRouter} from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {addComment, fetchDishes} from '../redux/ActionCreaters'; // we need this to add an action JS object which we can then \n// dispatch to the store \n// by calling store dispatch \n\n\n\n// state obtained here is the state from the redux store \nconst mapStateToProps = state => {\n  return { // derived from redux \n    // not connected to redux store unless we wrap it Main inside a connect \n    dishes: state.dishes,\n    comments: state.comments,\n    promotions: state.promotions, \n    leaders: state.leaders\n  }   \n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)), \n  fetchDishes: () => {dispatch(fetchDishes())} // fetch dishes when called and store in Redux store\n});\n\n// the state becomes available to the main class through mapStateToProps as the name suggests \n// mapping state through props to the main component here\nclass Main extends Component{\n\n  constructor(props){\n    super(props);\n    \n    \n  }\n\n  componentDidMount() {\n    //lifecycle method component will bound will be called or will be executed just after this component gets mounted into the view of my application \n    this.props.fetchDishes();\n\n    \n  }\n\n\n\n  // only track dishid not the entire dish \n  render(){\n    \n    const HomePage = () => {\n      return(\n        <Home // dishes.dishes from dishes.js component \n              dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\n              dishesisLoading = {this.props.dishes.isLoading}\n              dishesErrMess = {this.props.dishes.errMess}\n              promotion={this.props.promotions.filter((promo) => promo.featured)[0]}\n              leader={this.props.leaders.filter((leader) => leader.featured)[0]}\n          />\n          );\n    }\n    // match is the parameter , filter will return an array and 10 is the base of the integer we want from the parse \n    const DishWithId = ({match}) => {\n      return (\n        <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId, 10))[0]}\n        isLoading = {this.props.dishes.isLoading}\n        errMess = {this.props.dishes.errMess}\n        comments={this.props.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId, 10))}\n        addComment={this.props.addComment}\n        />\n      );\n    }\n\n    return( // exact is helps in matching exact \n      <div>\n        <Header />\n          <Switch>\n            <Route path=\"/home\" component={HomePage} />\n            <Route exact path =\"/menu\" component={() => <Menu dishes={this.props.dishes} />}/>\n            <Route path=\"/menu/:dishId\" component={DishWithId} />\n            <Route exact path=\"/contactus\" component={Contact} />\n            <Route path=\"/aboutus\" component={() => <About leaders ={this.props.leaders}/>}/>\n            <Redirect to=\"/home\" />\n          </Switch> \n        <Footer />\n      </div>\n    );\n    // arrow function helps us check each dish's dishId with selected dish \n    // the filter helps to check through an array of dishes \n    // filter function will give a subarray - elements from the array \n    // dishId matches the selectedDish \n    // filter function will give us a subarray of only one value therefore using [0] - item 0 from the array \n  }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main)); // exporting this app from app.js\n// in order to use the router we need to wrap withRouter\n// @TODO: understand withRouter","/home/bhuwan/Desktop/React/confusion_1/src/components/HeaderComponent.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/components/FooterComponent.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/components/HomeComponent.js",["104"],"/home/bhuwan/Desktop/React/confusion_1/src/components/ContactComponent.js",["105","106","107","108","109","110","111","112","113","114","115"],"import React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Form, FormGroup, Button, Label, Col, Row, FormFeedback} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport {Control, LocalForm, Errors} from 'react-redux-form';\n\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => val && (val.length >= len);\nconst isNumber = (val) => !isNaN(Number(val));\nconst validEmail = (val) => /^[A-Z0-0._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n// regular expression \n\nclass Contact extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n    //handle input change is removed because it will be managed automatically by react redux form \n\n    handleSubmit(values) {\n        console.log(\"Current State is: \" + JSON.stringify(values));\n        alert(\"Current State is: \" + JSON.stringify(values));\n    \n    }\n\n   \n\n\n    render() {\n        return(\n            <div className=\"container\">\n                 <div className=\"row\">\n                    <Breadcrumb>\n                        <BreadcrumbItem> <Link to=\"/home\">Home</Link> </BreadcrumbItem>\n                        <BreadcrumbItem active> Contact Us </BreadcrumbItem>\n                    </Breadcrumb>\n                  <div className=\"col-12\">\n                     <h3> Contact Us </h3>\n                    <hr />\n                  </div>\n                </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                    <h3>Location Information</h3>\n                    </div>\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\n                            <h5>Our Address</h5>\n                            <address>\n                            121, Clear Water Bay Road<br />\n                            Clear Water Bay, Kowloon<br />\n                            HONG KONG<br />\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\n                            </address>\n                    </div>\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\n                        <h5>Map of our Location</h5>\n                    </div>\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\n                        <div className=\"btn-group\" role=\"group\">\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h3> Send us Your Feedback </h3>\n                    </div>\n                    <div className=\"col-12 col-md-9\">\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label htmlfor=\"firstname\" md={2}> First Name </Label> \n                                <Col md={10}>\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\"\n                                    className=\"form-control\"\n                                    validators={{\n                                        required, minLength: minLength(3), maxLength: maxLength(15)\n                                    }}\n                                    /> \n                                    <Errors\n                                        className=\"text-danger\" \n                                        model=\".firstname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required: ', \n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }} \n                                    />\n                                    \n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlfor=\"lastname\" md={2}> Last Name </Label> \n                                <Col md={10}>\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\"\n                                    className=\"form-control\"\n                                    validators={{\n                                        required, minLength: minLength(3), maxLength: maxLength(15)\n                                    }}\n                                    />\n                                     <Errors\n                                        className=\"text-danger\" \n                                        model=\".lastname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required: ', \n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }} \n                                    />\n                              \n                                   \n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlfor=\"telnum\" md={2}> Contact Tel. </Label> \n                                <Col md={10}>\n                                    <Control.text model=\".telnum\"  id=\"telnum\" name=\"telnum\" placeholder=\"Tel. Num\"\n                                    className=\"form-control\"\n                                    validators={{\n                                        required, minLength: minLength(3), maxLength: maxLength(15), isNumber\n                                    }}\n                                   /> \n                                     <Errors\n                                        className=\"text-danger\" \n                                        model=\".telnum\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required: ', \n                                            minLength: 'Must be greater than 2 numbers',\n                                            maxLength: 'Must be 15 numbers or less', \n                                            isNumber: 'Must be a number'\n                                        }} \n                                    />\n                                   \n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlfor=\"email\" md={2}> Email </Label> \n                                <Col md={10}>\n                                    <Control.text model=\".email\" name=\"email\" placeholder=\"Email\"\n                                    className=\"form-control\"\n                                    validators={{\n                                        required, validEmail\n                                    }}\n                                   /> \n                                     <Errors\n                                        className=\"text-danger\" \n                                        model=\".email\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required: ', \n                                            validEmail: 'Invalid Email Address'\n                                       \n                                        }} \n                                    />\n                              \n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 6, offset: 2}} >\n                                    <div className=\"form-check\">\n                                        <Label check>\n                                            <Control.checkbox model=\".agree\" name=\"agree\" className=\"form-check-input\" />\n                                            {'  '} <strong> May we contact you ? </strong> \n                                        </Label>\n                                    </div>   \n                                </Col>\n                                \n                                <Col md={{size: 3, offset: 1}} >\n                                <Control.select model=\".contactType\" name=\"contactType\" className=\"form-control\"  >\n                                    <option> Tel. </option> \n                                    <option> Email </option>\n                                </Control.select>\n\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlfor=\"message\" md={2}> Your Feedback </Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\" rows=\"12\" \n                                        className=\"form-control\"\n                                   />\n                                  \n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                        Send Feedback\n                                    </Button>\n                                </Col>\n                            </Row>\n                           \n                        </LocalForm>\n                        \n                    </div>\n                </div>\n            </div>\n        );\n    }\n   \n}\n\nexport default Contact;","/home/bhuwan/Desktop/React/confusion_1/src/shared/promotions.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/shared/leaders.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/shared/Comments.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/components/AboutComponent.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/redux/configureStore.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/components/DishDetail.js",["116","117","118"],"import React, {Component} from 'react'\nimport { Card, CardImg, CardBody, CardText, Button, Modal, ModalHeader, ModalBody, Label, \n    Row, Col, CardTitle, Breadcrumb, BreadcrumbItem} from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport {LocalForm, Control , Errors} from 'react-redux-form';\nimport {Loading} from './LoadingComponent';\n\n\n\nconst DishDetail = (props) => {\n    if(props.isLoading) {\n        return (\n            // conditional rendering \n            <div className=\"container\">\n                    <div className=\"row\">\n                        <Loading /> \n                    </div>\n            </div> \n        );\n    }\n    else if(props.errMess){\n        return (\n            // conditional rendering \n            <div className=\"container\">\n                    <div className=\"row\">\n                        <h4>{props.errMess}</h4> \n                    </div>\n            </div> \n        );\n    }\n    \n    else if(props.dish != null){\n        return(\n        <div className=\"container\">\n              <div className=\"row\">\n                <Breadcrumb>\n                    <BreadcrumbItem> <Link to=\"/home\">Home</Link> </BreadcrumbItem>\n                    <BreadcrumbItem> <Link to=\"/menu\"> Menu </Link></BreadcrumbItem>\n                    <BreadcrumbItem active> {props.dish.name}</BreadcrumbItem>\n                </Breadcrumb>\n                <div className=\"col-12\">\n                    <h3> {props.dish.name} </h3>\n                    <hr />\n                </div>\n            </div>\n        <div className=\"row\">\n                <RenderDish dish={props.dish} />\n                <RenderComments comments={props.comments} \n                addComment={props.addComment} dishId={props.dish.id} />\n            </div>\n        </div>\n        );\n    }\n    else{\n        return(<div></div>);\n    }\n\n}\n\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length < len);\nconst minLength = (len) => (val) => val && (val.length >= len);\n\nclass CommentForm extends Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            isModalOpen: false\n        }\n\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        \n    }\n\n    toggleModal(){\n        this.setState({\n            isModalOpen: !this.state.isModalOpen\n        });\n\n    }\n\n    handleSubmit(values){\n        this.toggleModal();\n        this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\n\n    }\n\n    render() {\n        return(\n            <div>\n                <Button outline onClick={this.toggleModal}>\n                    <span className=\"fa fa-edit fa-lg\"></span> Submit Comment\n                </Button>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal} > Submit Comment </ModalHeader>\n                    <ModalBody>\n                        <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label for=\"rating\" md={12}>Rating</Label>\n                                <Col md={12}>\n                                    <Control.select model=\".rating\" name=\"rating\" className=\"form-control\">\n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                        <option>4</option>\n                                        <option>5</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"author\" md={12}> Your Name </Label>\n                                    <Col md={12}>\n                                        <Control.text model=\".author\" id=\"author\" name=\"author\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                        />\n                                        <Errors className=\"text-danger\" model=\".author\" show=\"touched\"\n                                            messages={{\n                                                required: 'Required: ',\n                                                minLength: \"Must be more than 3 characters\",\n                                                maxLength: \"Must be less than 15 characters\"\n            \n                                            }}\n                                            />\n                                    </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"feedback\" md={12}> Comment </Label>\n                                <Col md={12}>\n                                    <Control.text model=\".comment\" id=\"comment\" name=\"comment\"\n                                    resize=\"none\"\n                                    className=\"form-control\"\n                                    validators={{\n                                        required\n                                    }}\n                                    />\n                                    <Errors className=\"text-danger\" model=\"comment\" show=\"touched\"\n                                    messages={{\n                                        required: \"Required\"\n                                    \n                                    }}\n                                    />\n                                </Col>\n                            </Row>\n                            <Button type=\"submit\" value=\"submit\" className=\"btn btn-primary\"> Submit </Button>\n                        </LocalForm>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\n\n\n\n// user defined components always start with capital letter\nfunction RenderDish({dish}){\n    return(\n        <div className=\"col-12 col-md-5 m-1\">\n            <Card>\n                <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\n                <CardBody>\n                    <CardTitle>{dish.name}</CardTitle>\n                    <CardText>{dish.description}</CardText>\n                </CardBody>\n                </Card>\n        </div> \n    );\n}\n\nfunction RenderComments({comments, addComment, dishId}){\n    if(comments != null){\n        return(\n            <div className=\"col-12 col-md-5 m-1\">\n            <h4> Comments </h4>\n            <ul className=\"list-unstyled\">\n                {comments.map((comment) =>{\n                    return(\n                        <li key={comment.id}>\n                            <p> {comment.comment} </p>\n                            <p> --{comment.author}, {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}\n                            </p>\n                      \n                        </li>\n                    );\n                })}\n            </ul>\n            <CommentForm dishId={dishId} addComment={addComment}/>\n        </div>\n        );\n    }\n    else{\n        return(<div></div>);\n    }\n   \n}\n\n\n\n\nexport default DishDetail;\n\n\n\n\n// class DishDetail extends Component {\n\n//     componentDidMount() {\n//         console.log('DishDetail Component componentDidMount invoked');\n//     }\n\n//     componentDidUpdate(){\n//         console.log('DishDetial Component componentDidUpdate invoked')\n//     }\n\n    \n\n//     constructor(props){\n//         super(props);\n//     }\n\n\n//     renderDish(dish){\n//         return(\n\n//             <div className=\"col-12 col-md-5 m-1\">\n//                 <Card>\n//                 <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\n//                     <CardBody>\n//                         <CardTitle>{dish.name}</CardTitle>\n//                         <CardText>{dish.description}</CardText>\n//                     </CardBody>\n//                 </Card>\n//             </div>\n//         );\n//     }\n\n  \n\n//     render(){\n//         console.log('DishDetail Component componentDidMount render invoked');\n//         if(this.props.dish != null)\n//             return(\n//                 <div className=\"container\">\n//                     <div className=\"row\">\n//                         {this.renderDish(this.props.dish)}\n//                         {this.renderComments(this.props.dish.comments)}\n//                     </div>\n\n//                 </div>\n//             );\n//         else{\n//             return(\n//                 <div></div>\n//             );\n//         }\n//     } \n        \n    \n\n// }\n\n\n\n\n\n\n\n\n// function RenderDish({dish}) {\n//     if(dish != null){\n//         return(\n//             <div className=\"col-12 col-md-5 m-1\">\n//                 <Card>\n//                     <CardImg width=\"100%\" src={dish.image} alt={dish.name} />\n//                     <CardBody>\n//                         <CardTitle>{dish.name}</CardTitle>\n//                         <CardText>{dish.description}</CardText>\n//                     </CardBody>\n//                 </Card>\n//             </div> \n//         )\n//     }\n//     else{\n//         return(\n//             <div></div>\n//         )\n//     }\n// }\n\n// function RenderComments({comment}) {\n//     if(comment != null){\n//         let list = comment.map((comment) => {\n//             return(\n                \n//                 <li key={comment.id} >\n//                     <div>\n//                         <p> {comment.comment}</p>\n//                         <p> --{comment.author} , \n//                             {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}\n//                         </p>\n//                     </div>\n//                 </li>\n            \n\n//             )\n//         })\n        \n//         return(\n//             <div className=\"col-12 col-md-5 m-1\">\n//                 <h4> Comments </h4>\n//                 <ul className=\"list-unstyled\">\n//                     {list}\n//                 </ul>\n//             </div>\n//         )\n\n//     }\n//     else{\n//         return (\n//             <div></div>\n//         )\n//     }\n\n// }\n\n// const dishdetail = (props) => {\n//     const{dish} = props; \n\n//     return dish?(\n//         <div className=\"container\">\n//             <div className=\"row\">\n//                 <RenderDish dish={dish} />\n//                 <RenderComments comment={dish.comments} />\n//             </div>\n//         </div>\n//     ): (\n//         <div></div>\n//     )\n// }","/home/bhuwan/Desktop/React/confusion_1/src/redux/dishes.js",["119"],"import { DISHES } from '../shared/dishes';\nimport * as ActionTypes from './ActionTypes';\n\n\nexport const Dishes = (state = {\n        isLoading: true, \n        errMess: null, \n        dishes: [] // empty array initially\n    }, action) => {\n    switch(action.type){\n        // reducer\n        case ActionTypes.ADD_DISHES: \n            return {...state, isLoading: false, errMess: null, dishes: action.payload}; // ...state -> whatever the state is \n\n            \n        case ActionTypes.DISHES_LOADING:\n            return {...state, isLoading: true, errMess: null, dishes: []}; // ...state -> whatever the state is \n        \n        case ActionTypes.DISHES_FAILED: \n            return {...state, isLoading: false, errMess: action.payload, dishes: []}; // ...state -> whatever the state is \n\n\n\n        default: \n            return state;\n    }\n}","/home/bhuwan/Desktop/React/confusion_1/src/redux/comments.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/redux/promotions.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/redux/leaders.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/redux/ActionTypes.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/redux/ActionCreaters.js",[],"/home/bhuwan/Desktop/React/confusion_1/src/components/LoadingComponent.js",[],{"ruleId":"120","severity":1,"message":"121","line":8,"column":8,"nodeType":"122","messageId":"123","endLine":8,"endColumn":23},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":37,"column":3,"nodeType":"130","messageId":"131","endLine":41,"endColumn":4},{"ruleId":"120","severity":1,"message":"132","line":2,"column":69,"nodeType":"122","messageId":"123","endLine":2,"endColumn":89},{"ruleId":"120","severity":1,"message":"133","line":2,"column":38,"nodeType":"122","messageId":"123","endLine":2,"endColumn":42},{"ruleId":"120","severity":1,"message":"134","line":2,"column":44,"nodeType":"122","messageId":"123","endLine":2,"endColumn":53},{"ruleId":"120","severity":1,"message":"135","line":2,"column":80,"nodeType":"122","messageId":"123","endLine":2,"endColumn":92},{"ruleId":"136","severity":1,"message":"137","line":68,"column":29,"nodeType":"138","endLine":68,"endColumn":71},{"ruleId":"139","severity":1,"message":"140","line":82,"column":37,"nodeType":"138","endLine":87,"endColumn":39},{"ruleId":"139","severity":1,"message":"140","line":104,"column":37,"nodeType":"138","endLine":109,"endColumn":39},{"ruleId":"139","severity":1,"message":"140","line":127,"column":37,"nodeType":"138","endLine":132,"endColumn":38},{"ruleId":"139","severity":1,"message":"140","line":150,"column":37,"nodeType":"138","endLine":155,"endColumn":38},{"ruleId":"139","severity":1,"message":"141","line":173,"column":45,"nodeType":"138","endLine":173,"endColumn":122},{"ruleId":"139","severity":1,"message":"142","line":180,"column":33,"nodeType":"138","endLine":180,"endColumn":116},{"ruleId":"139","severity":1,"message":"143","line":190,"column":37,"nodeType":"138","endLine":192,"endColumn":38},{"ruleId":"139","severity":1,"message":"142","line":104,"column":37,"nodeType":"138","endLine":104,"endColumn":108},{"ruleId":"139","severity":1,"message":"140","line":116,"column":41,"nodeType":"138","endLine":121,"endColumn":43},{"ruleId":"139","severity":1,"message":"140","line":135,"column":37,"nodeType":"138","endLine":141,"endColumn":39},{"ruleId":"120","severity":1,"message":"144","line":1,"column":10,"nodeType":"122","messageId":"123","endLine":1,"endColumn":16},"no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'ListGroupItemHeading' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'FormFeedback' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]